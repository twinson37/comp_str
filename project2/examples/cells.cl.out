[CellularAutomaton][IO]{population_map[String]}{init(map[String])[SELF_TYPE](population_map<-map self)}{print()[SELF_TYPE](out_string(population_map.concat("\n")) self)}{num_cells()[Int]population_map.length()}{cell(position[Int])[String]population_map.substr(position 1)}{cell_left_neighbor(position[Int])[String](if (= position 0) cell((- num_cells() 1)) cell((- position 1)))}{cell_right_neighbor(position[Int])[String](if (= position (- num_cells() 1)) cell(0) cell((+ position 1)))}{cell_at_next_evolution(position[Int])[String](if (= (+ (+ (if (= cell(position) "X") 1 0) (if (= cell_left_neighbor(position) "X") 1 0)) (if (= cell_right_neighbor(position) "X") 1 0)) 1) "X" ".")}{evolve()[SELF_TYPE](let (position[Int]) (let (num[Int]<-num_cells()) (let (temp[String]) ((while (< position num) (temp<-temp.concat(cell_at_next_evolution(position)) position<-(+ position 1))) population_map<-temp self))))}
[Main]{cells[CellularAutomaton]}{main()[SELF_TYPE](cells<-(new CellularAutomaton).init("         X         ") cells.print() (let (countdown[Int]<-20) (while (< 0 countdown) (cells.evolve() cells.print() countdown<-(- countdown 1)))) self)}
