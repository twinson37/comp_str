[Graph]{vertices[VList]<-(new VList)}{edges[EList]<-(new EList)}{add_vertice(v[Vertice])[Object](edges<-v.outgoing().append(edges) vertices<-vertices.cons(v))}{print_E()[Object]edges.print()}{print_V()[Object]vertices.print()}
[Vertice][IO]{num[Int]}{out[EList]<-(new EList)}{outgoing()[EList]out}{number()[Int]num}{init(n[Int])[SELF_TYPE](num<-n self)}{add_out(s[Edge])[SELF_TYPE](out<-out.cons(s) self)}{print()[Object](out_int(num) out.print())}
[Edge][IO]{from[Int]}{to[Int]}{weight[Int]}{init(f[Int]t[Int]w[Int])[SELF_TYPE](from<-f to<-t weight<-w self)}{print()[Object](out_string(" (") out_int(from) out_string(",") out_int(to) out_string(")") out_int(weight))}
[EList][IO]{car[Edge]}{isNil()[Bool]true}{head()[Edge](abort() car)}{tail()[EList](abort() self)}{cons(e[Edge])[EList](new ECons).init(e self)}{append(l[EList])[EList](if self.isNil() l tail().append(l).cons(head()))}{print()[Object]out_string("\n")}
[ECons][EList]{cdr[EList]}{isNil()[Bool]false}{head()[Edge]car}{tail()[EList]cdr}{init(e[Edge]rest[EList])[EList](car<-e cdr<-rest self)}{print()[Object](car.print() cdr.print())}
[VList][IO]{car[Vertice]}{isNil()[Bool]true}{head()[Vertice](abort() car)}{tail()[VList](abort() self)}{cons(v[Vertice])[VList](new VCons).init(v self)}{print()[Object]out_string("\n")}
[VCons][VList]{cdr[VList]}{isNil()[Bool]false}{head()[Vertice]car}{tail()[VList]cdr}{init(v[Vertice]rest[VList])[VList](car<-v cdr<-rest self)}{print()[Object](car.print() cdr.print())}
[Parse][IO]{boolop[BoolOp]<-(new BoolOp)}{read_input()[Graph](let (g[Graph]<-(new Graph)) ((let (line[String]<-in_string()) (while boolop.and((not (= line "\n")) (not (= line ""))) (g.add_vertice(parse_line(line)) line<-in_string()))) g))}{parse_line(s[String])[Vertice](let (v[Vertice]<-(new Vertice).init(a2i(s))) ((while (not (= rest.length() 0)) ((let (succ[Int]<-a2i(rest)) (let (weight[Int]<-a2i(rest)) v.add_out((new Edge).init(v.number() succ weight)))))) v))}{c2i(char[String])[Int](if (= char "0") 0 (if (= char "1") 1 (if (= char "2") 2 (if (= char "3") 3 (if (= char "4") 4 (if (= char "5") 5 (if (= char "6") 6 (if (= char "7") 7 (if (= char "8") 8 (if (= char "9") 9 (abort() 0)))))))))))}{rest[String]}{a2i(s[String])[Int](if (= s.length() 0) 0 (if (= s.substr(0 1) "-") (~ a2i_aux(s.substr(1 (- s.length() 1)))) (if (= s.substr(0 1) " ") a2i(s.substr(1 (- s.length() 1))) a2i_aux(s))))}{a2i_aux(s[String])[Int](let (int[Int]<-0) ((let (j[Int]<-s.length()) (let (i[Int]<-0) (while (< i j) (let (c[String]<-s.substr(i 1)) (if (= c " ") (rest<-s.substr((+ i 1) (- (- s.length() i) 1)) i<-j) (if (= c ",") (rest<-s.substr((+ i 1) (- (- s.length() i) 1)) i<-j) (int<-(+ (* int 10) c2i(s.substr(i 1))) i<-(+ i 1) (if (= i j) rest<-"" "")))))))) int))}
[Main][Parse]{g[Graph]<-read_input()}{main()[Object](g.print_V() g.print_E())}
[BoolOp]{and(b1[Bool]b2[Bool])[Bool](if b1 b2 false)}{or(b1[Bool]b2[Bool])[Bool](if b1 true b2)}
