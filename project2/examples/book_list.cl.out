[Book][IO]{title[String]}{author[String]}{initBook(title_p[String]author_p[String])[Book](title<-title_p author<-author_p self)}{print()[Book](out_string("title:      ").out_string(title).out_string("\n") out_string("author:     ").out_string(author).out_string("\n") self)}
[Article][Book]{per_title[String]}{initArticle(title_p[String]author_p[String]per_title_p[String])[Article](initBook(title_p author_p) per_title<-per_title_p self)}{print()[Book](self.[Book]print() out_string("periodical:  ").out_string(per_title).out_string("\n") self)}
[BookList][IO]{isNil()[Bool](abort() true)}{cons(hd[Book])[Cons](let (new_cell[Cons]<-(new Cons)) new_cell.init(hd self))}{car()[Book](abort() (new Book))}{cdr()[BookList](abort() (new BookList))}{print_list()[Object]abort()}
[Cons][BookList]{xcar[Book]}{xcdr[BookList]}{isNil()[Bool]false}{init(hd[Book]tl[BookList])[Cons](xcar<-hd xcdr<-tl self)}{car()[Book]xcar}{cdr()[BookList]xcdr}{print_list()[Object]((case xcar.print()(dummy[Book]=>out_string("- dynamic type was Book -\n") dummy[Article]=>out_string("- dynamic type was Article -\n"))) xcdr.print_list())}
[Nil][BookList]{isNil()[Bool]true}{print_list()[Object]true}
[Main]{books[BookList]}{main()[Object](let (a_book[Book]<-(new Book).initBook("Compilers, Principles, Techniques, and Tools" "Aho, Sethi, and Ullman")) (let (an_article[Article]<-(new Article).initArticle("The Top 100 CD_ROMs" "Ulanoff" "PC Magazine")) (books<-(new Nil).cons(a_book).cons(an_article) books.print_list())))}
